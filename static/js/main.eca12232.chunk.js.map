{"version":3,"sources":["resources/search.svg","resources/list.svg","components/Countries.js","api/API.js","redux/actions/index.js","App.js","components/Search.js","components/Country.js","serviceWorker.js","redux/reducers/dataReducer.js","redux/reducers/index.js","index.js"],"names":["module","exports","getJSXFromCountryMap","countryMap","history","op","Object","keys","forEach","country","push","key","className","onClick","Countries","useHistory","useSelector","state","dataReducer","API","axios","create","baseURL","updateData","payload","type","App","dispatch","useDispatch","useEffect","a","get","then","response","countiresMap","data","dataEle","Country","catch","error","alert","console","log","fetchData","Search","useState","input","setInput","searchCountry","query","placeholder","onChange","e","target","value","src","search","width","alt","getTopBrands","sortParam","sort","x","y","split","ind","brand","toUpperCase","indexOf","tooltip","setTooltip","style","display","padding","textAlign","fontSize","list","reverse","Boolean","window","location","hostname","match","action","allReducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","exact","path","props","params","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.eca12232.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.5437e521.svg\";","module.exports = __webpack_public_path__ + \"static/media/list.7da6f7a2.svg\";","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './Countries.css';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Countries = () => {\r\n    const history = useHistory();\r\n    const { countryMap } = useSelector(state => state.dataReducer);\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            Click on country to know the various restaurants\r\n       \r\n            <div className=\"country-cards\">\r\n                {getJSXFromCountryMap(countryMap,history)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst getJSXFromCountryMap = (countryMap,history) => {\r\n    \r\n\r\n    if (!countryMap)\r\n        return null;\r\n    let op = [];\r\n    Object.keys(countryMap).forEach((country) => {\r\n        op.push(\r\n            <div key={country} className='country-card' onClick={()=>{history.push(\"/country/\"+country)}}>\r\n                {country}\r\n            </div>\r\n\r\n        )\r\n    }\r\n    );\r\n    return op;\r\n}\r\n\r\n\r\n\r\nexport default Countries;","import axios from 'axios';\r\n\r\nconst API = axios.create({\r\n    baseURL : \"http://starlord.hackerearth.com/TopRamen\",\r\n});\r\n\r\nexport default API;","export const updateData= (payload) =>{\r\n    return {\r\n        type : 'updateData',\r\n        payload \r\n    }\r\n}","import React, { useEffect } from 'react';\n\nimport './App.css';\nimport Countries from './components/Countries';\nimport API from './api/API';\nimport { useDispatch } from 'react-redux';\nimport { updateData } from './redux/actions';\n\nconst App = () => {\n\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await API.get().then((response) => {\n\n        const countiresMap = {};\n        response.data.forEach((dataEle) => {\n          if (countiresMap[dataEle.Country])\n            countiresMap[dataEle.Country].push(dataEle);\n          else\n            countiresMap[dataEle.Country] = [dataEle];\n        })\n        dispatch(updateData({ countryMap: countiresMap, data: response.data }));\n      }).catch((error) => {\n        alert('error while fetching');\n        console.log(error);\n      })\n    }\n    fetchData();\n  }, [dispatch]);\n\n\n\n\n  return (\n      < div className=\"App\" >\n        <Countries />\n      </div >\n  );\n}\n\nexport default App;\n","import React,{useState} from 'react';\r\nimport search from '../resources/search.svg';\r\nimport './Search.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateData } from '../redux/actions';\r\nconst Search = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [input,setInput] = useState('');\r\n    const searchCountry = (query) =>{\r\n        dispatch(updateData({ query: query }));\r\n    }\r\n    \r\n    return (\r\n        <div className=\"search-main\">\r\n            <input type=\"text\" className=\"input\" placeholder=\"Search...\" \r\n                onChange={(e)=>{setInput(e.target.value) ;searchCountry(e.target.value)}} value={input}/>\r\n            <img className=\"search-button\" src={search} width={25} alt=\"Logo\" onClick={()=>{\r\n                searchCountry(input)\r\n            }}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Search;","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './Countries.css';\r\nimport Search from './Search';\r\n\r\nimport list from '../resources/list.svg';\r\n\r\n\r\nconst Country = ({ country }) => {\r\n\r\n    const [tooltip,setTooltip] = useState([['Top Brands','Stars'],['Year','Top Ten']]);\r\n    const { countryMap, query } = useSelector(state => state.dataReducer);\r\n    return (\r\n        <div><div style={{display:'flex'}}>\r\n            <div  style={{padding:'20px',textAlign:'center',fontSize:'40px'}}>\r\n                {country}\r\n                </div>\r\n            <Search />\r\n            </div>\r\n            <div className='top-brands' > {tooltip[0][0] + '-' +  tooltip[0][1]}\r\n            \r\n            <div className=\"tooltip\">\r\n                <img className=\"search-button tooltip\" src={list} width={25} alt=\"Logo\" onClick={() => {\r\n                    setTooltip([...tooltip.reverse()])\r\n                }} /> <span className=\"tooltiptext\">{tooltip[1][0] +\"-\" +  tooltip[1][1]}</span>\r\n            </div>\r\n            </div>\r\n           \r\n            <br></br>\r\n            {getTopBrands(countryMap[country],tooltip[0][1],query)}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst getTopBrands = (data,sortParam,query) => {\r\n    data.sort(function (x, y) {\r\n        if(sortParam === 'Top Ten' )\r\n            return x[sortParam].split('#')[1] - y[sortParam].split('#')[1];\r\n        else\r\n            return y[sortParam] - x[sortParam];\r\n    });\r\n\r\n    let op = [];\r\n    let ind = 0;\r\n    data.forEach((brand) => {\r\n        if( !query || brand['Brand'].toUpperCase().indexOf(query.toUpperCase()) !== -1  ){\r\n            op.push(\r\n                <div className='brand' key={ind}  >\r\n                    {brand['Brand']} - {brand['Variety']} - {brand['Style']}\r\n                    <br></br>\r\n                    <b>TopTen</b> - {brand['Top Ten']}<br></br>\r\n                    <b>Stars</b> - {brand['Stars']}\r\n                </div>\r\n            )\r\n        ind++;\r\n        }\r\n    });\r\n    return op;\r\n\r\n}\r\n\r\nexport default Country;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// will have all methods related to navbar\r\n\r\nconst dataReducer = (state={data:{}},action) => {\r\n    switch(action.type){\r\n        case 'updateData':\r\n            return {...state,...action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default dataReducer;","import {combineReducers} from 'redux';\r\nimport dataReducer from './dataReducer';\r\n\r\nconst allReducers = combineReducers(\r\n    {\r\n        dataReducer,\r\n    });\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Country from './components/Country';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport allReducers from './redux/reducers';\nimport { Provider } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nconst store = createStore(allReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <App />\n        </Route>\n        <Route exact path=\"/country/:country\" render={(props) => (\n          <Country country={props.match.params.country} />\n        )} />\n      </Switch>\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}